// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	auth.proto
	handler.proto

It has these top-level messages:
	RequestAuthResp
	RequestAuthReq
	LoginReq
	LoginResp
	LogoutReq
	LogoutResp
	NewPasswordReq
	NewPasswordResp
	ChangePasswordReq
	ChangePasswordResp
	URLPartitionReq
	URLPartitionResp
	RequestReq
	RequestResp
	URL
	Header
	TLSState
	ProvideMountReq
	ProvideMountResp
	MountProvide
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestAuthResp struct {
	LoginState    int64                      `protobuf:"varint,1,opt,name=LoginState" json:"LoginState,omitempty"`
	Roles         []int64                    `protobuf:"varint,2,rep,packed,name=Roles" json:"Roles,omitempty"`
	ElevatedUntil *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=ElevatedUntil" json:"ElevatedUntil,omitempty"`
	TokenKey      string                     `protobuf:"bytes,10,opt,name=TokenKey" json:"TokenKey,omitempty"`
	Identity      string                     `protobuf:"bytes,20,opt,name=Identity" json:"Identity,omitempty"`
	GivenName     string                     `protobuf:"bytes,21,opt,name=GivenName" json:"GivenName,omitempty"`
	FamilyName    string                     `protobuf:"bytes,22,opt,name=FamilyName" json:"FamilyName,omitempty"`
}

func (m *RequestAuthResp) Reset()                    { *m = RequestAuthResp{} }
func (m *RequestAuthResp) String() string            { return proto.CompactTextString(m) }
func (*RequestAuthResp) ProtoMessage()               {}
func (*RequestAuthResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestAuthResp) GetLoginState() int64 {
	if m != nil {
		return m.LoginState
	}
	return 0
}

func (m *RequestAuthResp) GetRoles() []int64 {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *RequestAuthResp) GetElevatedUntil() *google_protobuf.Timestamp {
	if m != nil {
		return m.ElevatedUntil
	}
	return nil
}

func (m *RequestAuthResp) GetTokenKey() string {
	if m != nil {
		return m.TokenKey
	}
	return ""
}

func (m *RequestAuthResp) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RequestAuthResp) GetGivenName() string {
	if m != nil {
		return m.GivenName
	}
	return ""
}

func (m *RequestAuthResp) GetFamilyName() string {
	if m != nil {
		return m.FamilyName
	}
	return ""
}

type RequestAuthReq struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (m *RequestAuthReq) Reset()                    { *m = RequestAuthReq{} }
func (m *RequestAuthReq) String() string            { return proto.CompactTextString(m) }
func (*RequestAuthReq) ProtoMessage()               {}
func (*RequestAuthReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RequestAuthReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type LoginReq struct {
	Identity string `protobuf:"bytes,1,opt,name=Identity" json:"Identity,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginReq) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *LoginReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResp struct {
	SessionTokenValue string `protobuf:"bytes,1,opt,name=SessionTokenValue" json:"SessionTokenValue,omitempty"`
}

func (m *LoginResp) Reset()                    { *m = LoginResp{} }
func (m *LoginResp) String() string            { return proto.CompactTextString(m) }
func (*LoginResp) ProtoMessage()               {}
func (*LoginResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginResp) GetSessionTokenValue() string {
	if m != nil {
		return m.SessionTokenValue
	}
	return ""
}

type LogoutReq struct {
	// Types that are valid to be assigned to Value:
	//	*LogoutReq_SessionTokenValue
	//	*LogoutReq_Identity
	Value isLogoutReq_Value `protobuf_oneof:"Value"`
}

func (m *LogoutReq) Reset()                    { *m = LogoutReq{} }
func (m *LogoutReq) String() string            { return proto.CompactTextString(m) }
func (*LogoutReq) ProtoMessage()               {}
func (*LogoutReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isLogoutReq_Value interface {
	isLogoutReq_Value()
}

type LogoutReq_SessionTokenValue struct {
	SessionTokenValue string `protobuf:"bytes,1,opt,name=SessionTokenValue,oneof"`
}
type LogoutReq_Identity struct {
	Identity string `protobuf:"bytes,2,opt,name=Identity,oneof"`
}

func (*LogoutReq_SessionTokenValue) isLogoutReq_Value() {}
func (*LogoutReq_Identity) isLogoutReq_Value()          {}

func (m *LogoutReq) GetValue() isLogoutReq_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *LogoutReq) GetSessionTokenValue() string {
	if x, ok := m.GetValue().(*LogoutReq_SessionTokenValue); ok {
		return x.SessionTokenValue
	}
	return ""
}

func (m *LogoutReq) GetIdentity() string {
	if x, ok := m.GetValue().(*LogoutReq_Identity); ok {
		return x.Identity
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LogoutReq) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LogoutReq_OneofMarshaler, _LogoutReq_OneofUnmarshaler, _LogoutReq_OneofSizer, []interface{}{
		(*LogoutReq_SessionTokenValue)(nil),
		(*LogoutReq_Identity)(nil),
	}
}

func _LogoutReq_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LogoutReq)
	// Value
	switch x := m.Value.(type) {
	case *LogoutReq_SessionTokenValue:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.SessionTokenValue)
	case *LogoutReq_Identity:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Identity)
	case nil:
	default:
		return fmt.Errorf("LogoutReq.Value has unexpected type %T", x)
	}
	return nil
}

func _LogoutReq_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LogoutReq)
	switch tag {
	case 1: // Value.SessionTokenValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &LogoutReq_SessionTokenValue{x}
		return true, err
	case 2: // Value.Identity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &LogoutReq_Identity{x}
		return true, err
	default:
		return false, nil
	}
}

func _LogoutReq_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LogoutReq)
	// Value
	switch x := m.Value.(type) {
	case *LogoutReq_SessionTokenValue:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.SessionTokenValue)))
		n += len(x.SessionTokenValue)
	case *LogoutReq_Identity:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Identity)))
		n += len(x.Identity)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LogoutResp struct {
}

func (m *LogoutResp) Reset()                    { *m = LogoutResp{} }
func (m *LogoutResp) String() string            { return proto.CompactTextString(m) }
func (*LogoutResp) ProtoMessage()               {}
func (*LogoutResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type NewPasswordReq struct {
	Identity string `protobuf:"bytes,1,opt,name=Identity" json:"Identity,omitempty"`
}

func (m *NewPasswordReq) Reset()                    { *m = NewPasswordReq{} }
func (m *NewPasswordReq) String() string            { return proto.CompactTextString(m) }
func (*NewPasswordReq) ProtoMessage()               {}
func (*NewPasswordReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NewPasswordReq) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type NewPasswordResp struct {
}

func (m *NewPasswordResp) Reset()                    { *m = NewPasswordResp{} }
func (m *NewPasswordResp) String() string            { return proto.CompactTextString(m) }
func (*NewPasswordResp) ProtoMessage()               {}
func (*NewPasswordResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ChangePasswordReq struct {
	// SessionTokenValue must be valid for the password to be changed.
	SessionTokenValue string `protobuf:"bytes,1,opt,name=SessionTokenValue" json:"SessionTokenValue,omitempty"`
	// CurrentPassword is not used if the login state is Change Password.
	// In that state it is assumed the client has just authenticated and
	// entering the current password again would be redundant.
	CurrentPassword string `protobuf:"bytes,2,opt,name=CurrentPassword" json:"CurrentPassword,omitempty"`
	// NewPassword to set. If the password is too weak it may be rejected.
	NewPassword string `protobuf:"bytes,3,opt,name=NewPassword" json:"NewPassword,omitempty"`
}

func (m *ChangePasswordReq) Reset()                    { *m = ChangePasswordReq{} }
func (m *ChangePasswordReq) String() string            { return proto.CompactTextString(m) }
func (*ChangePasswordReq) ProtoMessage()               {}
func (*ChangePasswordReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ChangePasswordReq) GetSessionTokenValue() string {
	if m != nil {
		return m.SessionTokenValue
	}
	return ""
}

func (m *ChangePasswordReq) GetCurrentPassword() string {
	if m != nil {
		return m.CurrentPassword
	}
	return ""
}

func (m *ChangePasswordReq) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

type ChangePasswordResp struct {
	// Changed is true when the password was changed.
	// If false the InvalidNewPasswordMessage text should
	// be displayed to the user.
	Changed bool `protobuf:"varint,1,opt,name=Changed" json:"Changed,omitempty"`
	// InvalidNewPasswordMessage is is set when Changed is true.
	InvalidNewPasswordMessage string `protobuf:"bytes,2,opt,name=InvalidNewPasswordMessage" json:"InvalidNewPasswordMessage,omitempty"`
}

func (m *ChangePasswordResp) Reset()                    { *m = ChangePasswordResp{} }
func (m *ChangePasswordResp) String() string            { return proto.CompactTextString(m) }
func (*ChangePasswordResp) ProtoMessage()               {}
func (*ChangePasswordResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ChangePasswordResp) GetChanged() bool {
	if m != nil {
		return m.Changed
	}
	return false
}

func (m *ChangePasswordResp) GetInvalidNewPasswordMessage() string {
	if m != nil {
		return m.InvalidNewPasswordMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestAuthResp)(nil), "api.RequestAuthResp")
	proto.RegisterType((*RequestAuthReq)(nil), "api.RequestAuthReq")
	proto.RegisterType((*LoginReq)(nil), "api.LoginReq")
	proto.RegisterType((*LoginResp)(nil), "api.LoginResp")
	proto.RegisterType((*LogoutReq)(nil), "api.LogoutReq")
	proto.RegisterType((*LogoutResp)(nil), "api.LogoutResp")
	proto.RegisterType((*NewPasswordReq)(nil), "api.NewPasswordReq")
	proto.RegisterType((*NewPasswordResp)(nil), "api.NewPasswordResp")
	proto.RegisterType((*ChangePasswordReq)(nil), "api.ChangePasswordReq")
	proto.RegisterType((*ChangePasswordResp)(nil), "api.ChangePasswordResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	RequestAuth(ctx context.Context, in *RequestAuthReq, opts ...grpc.CallOption) (*RequestAuthResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	// NewPassword chooses a new password for the given identity.
	// The identity must be notified of this change.
	NewPassword(ctx context.Context, in *NewPasswordReq, opts ...grpc.CallOption) (*NewPasswordResp, error)
	// ChangePassword updates the clients password. It should be used
	// when the user is updating the password themselves.
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) RequestAuth(ctx context.Context, in *RequestAuthReq, opts ...grpc.CallOption) (*RequestAuthResp, error) {
	out := new(RequestAuthResp)
	err := grpc.Invoke(ctx, "/api.Auth/RequestAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := grpc.Invoke(ctx, "/api.Auth/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := grpc.Invoke(ctx, "/api.Auth/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) NewPassword(ctx context.Context, in *NewPasswordReq, opts ...grpc.CallOption) (*NewPasswordResp, error) {
	out := new(NewPasswordResp)
	err := grpc.Invoke(ctx, "/api.Auth/NewPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	out := new(ChangePasswordResp)
	err := grpc.Invoke(ctx, "/api.Auth/ChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	RequestAuth(context.Context, *RequestAuthReq) (*RequestAuthResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	// NewPassword chooses a new password for the given identity.
	// The identity must be notified of this change.
	NewPassword(context.Context, *NewPasswordReq) (*NewPasswordResp, error)
	// ChangePassword updates the clients password. It should be used
	// when the user is updating the password themselves.
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_RequestAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RequestAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Auth/RequestAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RequestAuth(ctx, req.(*RequestAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Auth/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_NewPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).NewPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Auth/NewPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).NewPassword(ctx, req.(*NewPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Auth/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAuth",
			Handler:    _Auth_RequestAuth_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Auth_Logout_Handler,
		},
		{
			MethodName: "NewPassword",
			Handler:    _Auth_NewPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Auth_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x13, 0xd2, 0x26, 0x13, 0x9a, 0x28, 0x43, 0x28, 0xc6, 0xaa, 0x20, 0xf2, 0x01, 0x59,
	0xa2, 0x72, 0xa5, 0x72, 0xa2, 0xe2, 0x00, 0x8d, 0xf8, 0xa8, 0x80, 0x0a, 0xb9, 0x85, 0xfb, 0x46,
	0x19, 0x12, 0x0b, 0xc7, 0xbb, 0xcd, 0xae, 0x53, 0xe5, 0x47, 0xf0, 0x07, 0xf8, 0xb3, 0x20, 0xef,
	0xda, 0x61, 0xed, 0xb4, 0x42, 0x1c, 0xe7, 0xbd, 0xb7, 0x33, 0x6f, 0x3e, 0xb4, 0x00, 0x2c, 0x53,
	0xf3, 0x50, 0x2c, 0xb9, 0xe2, 0xd8, 0x64, 0x22, 0xf6, 0x9e, 0xce, 0x38, 0x9f, 0x25, 0x74, 0xac,
	0xa1, 0x49, 0xf6, 0xfd, 0x58, 0xc5, 0x0b, 0x92, 0x8a, 0x2d, 0x84, 0x51, 0xf9, 0xbf, 0x1d, 0xe8,
	0x47, 0x74, 0x9d, 0x91, 0x54, 0x6f, 0x32, 0x35, 0x8f, 0x48, 0x0a, 0x7c, 0x02, 0xf0, 0x89, 0xcf,
	0xe2, 0xf4, 0x52, 0x31, 0x45, 0xae, 0x33, 0x72, 0x82, 0x66, 0x64, 0x21, 0x38, 0x84, 0x56, 0xc4,
	0x13, 0x92, 0x6e, 0x63, 0xd4, 0x0c, 0x9a, 0x91, 0x09, 0xf0, 0x35, 0xec, 0xbf, 0x4d, 0x68, 0xc5,
	0x14, 0x4d, 0xbf, 0xa6, 0x2a, 0x4e, 0xdc, 0xe6, 0xc8, 0x09, 0xba, 0x27, 0x5e, 0x68, 0x2c, 0x84,
	0xa5, 0x85, 0xf0, 0xaa, 0xb4, 0x10, 0x55, 0x1f, 0xa0, 0x07, 0xed, 0x2b, 0xfe, 0x83, 0xd2, 0x8f,
	0xb4, 0x76, 0x61, 0xe4, 0x04, 0x9d, 0x68, 0x13, 0xe7, 0xdc, 0xf9, 0x94, 0x52, 0x15, 0xab, 0xb5,
	0x3b, 0x34, 0x5c, 0x19, 0xe3, 0x21, 0x74, 0xde, 0xc7, 0x2b, 0x4a, 0x2f, 0xd8, 0x82, 0xdc, 0x87,
	0x9a, 0xfc, 0x0b, 0xe4, 0xdd, 0xbc, 0x63, 0x8b, 0x38, 0x59, 0x6b, 0xfa, 0x40, 0xd3, 0x16, 0xe2,
	0x3f, 0x83, 0x5e, 0x65, 0x00, 0xd7, 0x79, 0x7f, 0xba, 0xae, 0x6e, 0xbd, 0x13, 0x99, 0xc0, 0x3f,
	0x83, 0xb6, 0x9e, 0x41, 0xae, 0xb0, 0xdd, 0x38, 0x35, 0x37, 0x1e, 0xb4, 0xbf, 0x30, 0x29, 0x6f,
	0xf8, 0x72, 0xea, 0x36, 0x0c, 0x57, 0xc6, 0xfe, 0x4b, 0xe8, 0x14, 0x39, 0xa4, 0xc0, 0x23, 0x18,
	0x5c, 0x92, 0x94, 0x31, 0x4f, 0x75, 0x81, 0x6f, 0x2c, 0xc9, 0xa8, 0xc8, 0xb6, 0x4d, 0xf8, 0x13,
	0xfd, 0x94, 0x67, 0x2a, 0xaf, 0x1f, 0xde, 0xf9, 0xf4, 0xc3, 0xce, 0x2d, 0x8f, 0xf1, 0xd0, 0xf2,
	0xdb, 0x28, 0x64, 0x1b, 0xe4, 0x6c, 0x0f, 0x5a, 0xa6, 0xc6, 0x7d, 0xbd, 0x78, 0x5d, 0x43, 0x0a,
	0xff, 0x08, 0x7a, 0x17, 0x74, 0x53, 0x7a, 0xff, 0x47, 0xdb, 0xfe, 0x00, 0xfa, 0x15, 0xb5, 0x14,
	0xfe, 0x4f, 0x07, 0x06, 0xe3, 0x39, 0x4b, 0x67, 0x64, 0x27, 0xf9, 0xaf, 0xb6, 0x31, 0x80, 0xfe,
	0x38, 0x5b, 0x2e, 0x29, 0x55, 0xb5, 0xa1, 0xd6, 0x61, 0x1c, 0x41, 0xd7, 0x32, 0xa0, 0xaf, 0xaf,
	0x13, 0xd9, 0x90, 0x9f, 0x00, 0xd6, 0xed, 0x48, 0x81, 0x2e, 0xec, 0x19, 0x74, 0xaa, 0x5d, 0xb4,
	0xa3, 0x32, 0xc4, 0x57, 0xf0, 0xf8, 0x3c, 0x5d, 0xb1, 0x24, 0x9e, 0x5a, 0x59, 0x3e, 0x93, 0x94,
	0x6c, 0x46, 0x85, 0x8b, 0xbb, 0x05, 0x27, 0xbf, 0x1a, 0x70, 0x2f, 0xbf, 0x28, 0x3c, 0x85, 0xae,
	0x75, 0x60, 0xf8, 0x20, 0x64, 0x22, 0x0e, 0xab, 0x27, 0xe7, 0x0d, 0xb7, 0x41, 0x29, 0xfc, 0x1d,
	0x0c, 0xa0, 0xa5, 0x0f, 0x06, 0xf7, 0xb5, 0xa0, 0x3c, 0x40, 0xaf, 0x67, 0x87, 0x5a, 0xf9, 0x1c,
	0x76, 0xcd, 0xee, 0x70, 0xc3, 0x99, 0x63, 0xf1, 0xfa, 0x95, 0x58, 0x8b, 0x4f, 0x2b, 0xb3, 0x2a,
	0x2c, 0x55, 0x97, 0x5d, 0x58, 0xaa, 0xef, 0x74, 0x07, 0xc7, 0xd0, 0xab, 0x4e, 0x11, 0x0f, 0xb4,
	0x72, 0x6b, 0xd3, 0xde, 0xa3, 0x5b, 0xf1, 0x3c, 0xc9, 0x64, 0x57, 0xff, 0x06, 0x2f, 0xfe, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x58, 0xee, 0x5f, 0xa4, 0xb1, 0x04, 0x00, 0x00,
}
