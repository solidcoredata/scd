// Code generated by protoc-gen-go.
// source: handler.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type URLPartitionReq struct {
}

func (m *URLPartitionReq) Reset()                    { *m = URLPartitionReq{} }
func (m *URLPartitionReq) String() string            { return proto.CompactTextString(m) }
func (*URLPartitionReq) ProtoMessage()               {}
func (*URLPartitionReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type URLPartitionResp struct {
	Prefix          string `protobuf:"bytes,1,opt,name=Prefix" json:"Prefix,omitempty"`
	ConsumeRedirect bool   `protobuf:"varint,2,opt,name=ConsumeRedirect" json:"ConsumeRedirect,omitempty"`
}

func (m *URLPartitionResp) Reset()                    { *m = URLPartitionResp{} }
func (m *URLPartitionResp) String() string            { return proto.CompactTextString(m) }
func (*URLPartitionResp) ProtoMessage()               {}
func (*URLPartitionResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *URLPartitionResp) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *URLPartitionResp) GetConsumeRedirect() bool {
	if m != nil {
		return m.ConsumeRedirect
	}
	return false
}

type RequestReq struct {
	Host string `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
	// Method specifies the HTTP method (GET, POST, PUT, etc.).
	Method string `protobuf:"bytes,2,opt,name=Method" json:"Method,omitempty"`
	// URL specifies either the URI being requested.
	URL *URL `protobuf:"bytes,3,opt,name=URL" json:"URL,omitempty"`
	// The protocol version for incoming server requests.
	ProtoMajor  int32   `protobuf:"varint,4,opt,name=ProtoMajor" json:"ProtoMajor,omitempty"`
	ProtoMinor  int32   `protobuf:"varint,5,opt,name=ProtoMinor" json:"ProtoMinor,omitempty"`
	Header      *Header `protobuf:"bytes,6,opt,name=Header" json:"Header,omitempty"`
	Body        []byte  `protobuf:"bytes,7,opt,name=Body,proto3" json:"Body,omitempty"`
	ContentType string  `protobuf:"bytes,8,opt,name=ContentType" json:"ContentType,omitempty"`
	// RemoteAddr allows HTTP servers and other software to record
	// the network address that sent the request, usually for
	// logging. This field is not filled in by ReadRequest and
	// has no defined format. The HTTP server in this package
	// sets RemoteAddr to an "IP:port" address before invoking a
	// handler.
	RemoteAddr string    `protobuf:"bytes,9,opt,name=RemoteAddr" json:"RemoteAddr,omitempty"`
	TLS        *TLSState `protobuf:"bytes,10,opt,name=TLS" json:"TLS,omitempty"`
}

func (m *RequestReq) Reset()                    { *m = RequestReq{} }
func (m *RequestReq) String() string            { return proto.CompactTextString(m) }
func (*RequestReq) ProtoMessage()               {}
func (*RequestReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RequestReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *RequestReq) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RequestReq) GetURL() *URL {
	if m != nil {
		return m.URL
	}
	return nil
}

func (m *RequestReq) GetProtoMajor() int32 {
	if m != nil {
		return m.ProtoMajor
	}
	return 0
}

func (m *RequestReq) GetProtoMinor() int32 {
	if m != nil {
		return m.ProtoMinor
	}
	return 0
}

func (m *RequestReq) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RequestReq) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *RequestReq) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *RequestReq) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *RequestReq) GetTLS() *TLSState {
	if m != nil {
		return m.TLS
	}
	return nil
}

type RequestResp struct {
	// Content type of the body.
	ContentType string `protobuf:"bytes,1,opt,name=ContentType" json:"ContentType,omitempty"`
	// Encoding of the response. Often a compression method like "gzip" or "br".
	Encoding string `protobuf:"bytes,2,opt,name=Encoding" json:"Encoding,omitempty"`
	Body     []byte `protobuf:"bytes,3,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (m *RequestResp) Reset()                    { *m = RequestResp{} }
func (m *RequestResp) String() string            { return proto.CompactTextString(m) }
func (*RequestResp) ProtoMessage()               {}
func (*RequestResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RequestResp) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *RequestResp) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *RequestResp) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type URL struct {
}

func (m *URL) Reset()                    { *m = URL{} }
func (m *URL) String() string            { return proto.CompactTextString(m) }
func (*URL) ProtoMessage()               {}
func (*URL) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type Header struct {
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type TLSState struct {
	Version           uint32 `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	HandshakeComplete bool   `protobuf:"varint,2,opt,name=HandshakeComplete" json:"HandshakeComplete,omitempty"`
	DidResume         bool   `protobuf:"varint,3,opt,name=DidResume" json:"DidResume,omitempty"`
	CipherSuite       uint32 `protobuf:"varint,4,opt,name=CipherSuite" json:"CipherSuite,omitempty"`
	ServerName        string `protobuf:"bytes,5,opt,name=ServerName" json:"ServerName,omitempty"`
}

func (m *TLSState) Reset()                    { *m = TLSState{} }
func (m *TLSState) String() string            { return proto.CompactTextString(m) }
func (*TLSState) ProtoMessage()               {}
func (*TLSState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *TLSState) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TLSState) GetHandshakeComplete() bool {
	if m != nil {
		return m.HandshakeComplete
	}
	return false
}

func (m *TLSState) GetDidResume() bool {
	if m != nil {
		return m.DidResume
	}
	return false
}

func (m *TLSState) GetCipherSuite() uint32 {
	if m != nil {
		return m.CipherSuite
	}
	return 0
}

func (m *TLSState) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

type ProvideMountReq struct {
}

func (m *ProvideMountReq) Reset()                    { *m = ProvideMountReq{} }
func (m *ProvideMountReq) String() string            { return proto.CompactTextString(m) }
func (*ProvideMountReq) ProtoMessage()               {}
func (*ProvideMountReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type ProvideMountResp struct {
	List []*MountProvide `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
}

func (m *ProvideMountResp) Reset()                    { *m = ProvideMountResp{} }
func (m *ProvideMountResp) String() string            { return proto.CompactTextString(m) }
func (*ProvideMountResp) ProtoMessage()               {}
func (*ProvideMountResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ProvideMountResp) GetList() []*MountProvide {
	if m != nil {
		return m.List
	}
	return nil
}

type MountProvide struct {
	// AllowCache should be set to true if the resource may be safely cached
	// while the component is loaded.
	AllowCache bool `protobuf:"varint,1,opt,name=AllowCache" json:"AllowCache,omitempty"`
	// Mount at this point.
	//  "/" Mount at the root.
	//  "/lib/staic/" mount directory.
	//  "/api/syscall" mount endpoint.
	At string `protobuf:"bytes,2,opt,name=At" json:"At,omitempty"`
}

func (m *MountProvide) Reset()                    { *m = MountProvide{} }
func (m *MountProvide) String() string            { return proto.CompactTextString(m) }
func (*MountProvide) ProtoMessage()               {}
func (*MountProvide) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *MountProvide) GetAllowCache() bool {
	if m != nil {
		return m.AllowCache
	}
	return false
}

func (m *MountProvide) GetAt() string {
	if m != nil {
		return m.At
	}
	return ""
}

func init() {
	proto.RegisterType((*URLPartitionReq)(nil), "api.URLPartitionReq")
	proto.RegisterType((*URLPartitionResp)(nil), "api.URLPartitionResp")
	proto.RegisterType((*RequestReq)(nil), "api.RequestReq")
	proto.RegisterType((*RequestResp)(nil), "api.RequestResp")
	proto.RegisterType((*URL)(nil), "api.URL")
	proto.RegisterType((*Header)(nil), "api.Header")
	proto.RegisterType((*TLSState)(nil), "api.TLSState")
	proto.RegisterType((*ProvideMountReq)(nil), "api.ProvideMountReq")
	proto.RegisterType((*ProvideMountResp)(nil), "api.ProvideMountResp")
	proto.RegisterType((*MountProvide)(nil), "api.MountProvide")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppHandler service

type AppHandlerClient interface {
	// URLPartition returns the URL prefix and if an available redirect
	// should be removed path and if the prefix matches, redirected to.
	// The prefix should start and end with a slash "/".
	URLPartition(ctx context.Context, in *URLPartitionReq, opts ...grpc.CallOption) (*URLPartitionResp, error)
	Request(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*RequestResp, error)
}

type appHandlerClient struct {
	cc *grpc.ClientConn
}

func NewAppHandlerClient(cc *grpc.ClientConn) AppHandlerClient {
	return &appHandlerClient{cc}
}

func (c *appHandlerClient) URLPartition(ctx context.Context, in *URLPartitionReq, opts ...grpc.CallOption) (*URLPartitionResp, error) {
	out := new(URLPartitionResp)
	err := grpc.Invoke(ctx, "/api.AppHandler/URLPartition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHandlerClient) Request(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*RequestResp, error) {
	out := new(RequestResp)
	err := grpc.Invoke(ctx, "/api.AppHandler/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppHandler service

type AppHandlerServer interface {
	// URLPartition returns the URL prefix and if an available redirect
	// should be removed path and if the prefix matches, redirected to.
	// The prefix should start and end with a slash "/".
	URLPartition(context.Context, *URLPartitionReq) (*URLPartitionResp, error)
	Request(context.Context, *RequestReq) (*RequestResp, error)
}

func RegisterAppHandlerServer(s *grpc.Server, srv AppHandlerServer) {
	s.RegisterService(&_AppHandler_serviceDesc, srv)
}

func _AppHandler_URLPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLPartitionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHandlerServer).URLPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AppHandler/URLPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHandlerServer).URLPartition(ctx, req.(*URLPartitionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHandler_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHandlerServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AppHandler/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHandlerServer).Request(ctx, req.(*RequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AppHandler",
	HandlerType: (*AppHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "URLPartition",
			Handler:    _AppHandler_URLPartition_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _AppHandler_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler.proto",
}

// Client API for AppComponentHandler service

type AppComponentHandlerClient interface {
	// URLPartition returns the URL prefix and if an available redirect
	// should be removed path and if the prefix matches, redirected to.
	// The prefix should start and end with a slash "/".
	ProvideMount(ctx context.Context, in *ProvideMountReq, opts ...grpc.CallOption) (*ProvideMountResp, error)
	Request(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*RequestResp, error)
}

type appComponentHandlerClient struct {
	cc *grpc.ClientConn
}

func NewAppComponentHandlerClient(cc *grpc.ClientConn) AppComponentHandlerClient {
	return &appComponentHandlerClient{cc}
}

func (c *appComponentHandlerClient) ProvideMount(ctx context.Context, in *ProvideMountReq, opts ...grpc.CallOption) (*ProvideMountResp, error) {
	out := new(ProvideMountResp)
	err := grpc.Invoke(ctx, "/api.AppComponentHandler/ProvideMount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appComponentHandlerClient) Request(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*RequestResp, error) {
	out := new(RequestResp)
	err := grpc.Invoke(ctx, "/api.AppComponentHandler/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppComponentHandler service

type AppComponentHandlerServer interface {
	// URLPartition returns the URL prefix and if an available redirect
	// should be removed path and if the prefix matches, redirected to.
	// The prefix should start and end with a slash "/".
	ProvideMount(context.Context, *ProvideMountReq) (*ProvideMountResp, error)
	Request(context.Context, *RequestReq) (*RequestResp, error)
}

func RegisterAppComponentHandlerServer(s *grpc.Server, srv AppComponentHandlerServer) {
	s.RegisterService(&_AppComponentHandler_serviceDesc, srv)
}

func _AppComponentHandler_ProvideMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideMountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppComponentHandlerServer).ProvideMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AppComponentHandler/ProvideMount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppComponentHandlerServer).ProvideMount(ctx, req.(*ProvideMountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppComponentHandler_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppComponentHandlerServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AppComponentHandler/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppComponentHandlerServer).Request(ctx, req.(*RequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppComponentHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AppComponentHandler",
	HandlerType: (*AppComponentHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvideMount",
			Handler:    _AppComponentHandler_ProvideMount_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _AppComponentHandler_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler.proto",
}

func init() { proto.RegisterFile("handler.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x8f, 0xd2, 0x40,
	0x14, 0xc7, 0x2d, 0xdd, 0x65, 0xcb, 0x63, 0x71, 0x61, 0xfc, 0x91, 0x86, 0x18, 0x6d, 0x6a, 0x4c,
	0x7a, 0x30, 0x1c, 0xf0, 0xe4, 0x41, 0x93, 0x8a, 0x26, 0x1c, 0x8a, 0x21, 0x03, 0x78, 0x35, 0x95,
	0x3e, 0x65, 0x14, 0x66, 0x86, 0xe9, 0xb0, 0xba, 0xf1, 0xea, 0x1f, 0x64, 0xfc, 0x0b, 0xcd, 0x0c,
	0x05, 0x06, 0xd6, 0x8b, 0xb7, 0xce, 0xe7, 0x4d, 0xde, 0xf7, 0xbd, 0xef, 0xbc, 0x57, 0x68, 0x2d,
	0x72, 0x5e, 0x2c, 0x51, 0xf5, 0xa4, 0x12, 0x5a, 0x10, 0x3f, 0x97, 0x2c, 0xee, 0xc0, 0xd5, 0x8c,
	0x66, 0xe3, 0x5c, 0x69, 0xa6, 0x99, 0xe0, 0x14, 0xd7, 0xf1, 0x14, 0xda, 0xc7, 0xa8, 0x94, 0xe4,
	0x21, 0xd4, 0xc7, 0x0a, 0x3f, 0xb3, 0x1f, 0xa1, 0x17, 0x79, 0x49, 0x83, 0x56, 0x27, 0x92, 0xc0,
	0xd5, 0x40, 0xf0, 0x72, 0xb3, 0x42, 0x8a, 0x05, 0x53, 0x38, 0xd7, 0x61, 0x2d, 0xf2, 0x92, 0x80,
	0x9e, 0xe2, 0xf8, 0x77, 0x0d, 0x80, 0xe2, 0x7a, 0x83, 0xa5, 0xa6, 0xb8, 0x26, 0x04, 0xce, 0x86,
	0xa2, 0xd4, 0x55, 0x3a, 0xfb, 0x6d, 0x44, 0x46, 0xa8, 0x17, 0xa2, 0xb0, 0x39, 0x1a, 0xb4, 0x3a,
	0x91, 0x2e, 0xf8, 0x33, 0x9a, 0x85, 0x7e, 0xe4, 0x25, 0xcd, 0x7e, 0xd0, 0xcb, 0x25, 0xeb, 0xcd,
	0x68, 0x46, 0x0d, 0x24, 0x8f, 0x01, 0xc6, 0xa6, 0x9b, 0x51, 0xfe, 0x55, 0xa8, 0xf0, 0x2c, 0xf2,
	0x92, 0x73, 0xea, 0x90, 0x43, 0x9c, 0x71, 0xa1, 0xc2, 0x73, 0x37, 0x6e, 0x08, 0x79, 0x0a, 0xf5,
	0x21, 0xe6, 0x05, 0xaa, 0xb0, 0x6e, 0xd3, 0x37, 0x6d, 0xfa, 0x2d, 0xa2, 0x55, 0xc8, 0x14, 0xfb,
	0x46, 0x14, 0x37, 0xe1, 0x45, 0xe4, 0x25, 0x97, 0xd4, 0x7e, 0x93, 0x08, 0x9a, 0x03, 0xc1, 0x35,
	0x72, 0x3d, 0xbd, 0x91, 0x18, 0x06, 0xb6, 0x62, 0x17, 0x19, 0x69, 0x8a, 0x2b, 0xa1, 0x31, 0x2d,
	0x0a, 0x15, 0x36, 0xec, 0x05, 0x87, 0x90, 0x27, 0xe0, 0x4f, 0xb3, 0x49, 0x08, 0x56, 0xb7, 0x65,
	0x75, 0xa7, 0xd9, 0x64, 0xa2, 0x73, 0x8d, 0xd4, 0x44, 0xe2, 0x8f, 0xd0, 0xdc, 0x3b, 0x56, 0xca,
	0x53, 0x45, 0xef, 0xb6, 0x62, 0x17, 0x82, 0x77, 0x7c, 0x2e, 0x0a, 0xc6, 0xbf, 0x54, 0x16, 0xee,
	0xcf, 0xfb, 0x1e, 0xfc, 0x43, 0x0f, 0xf1, 0xb9, 0x35, 0x36, 0x0e, 0x76, 0x1e, 0xc4, 0x7f, 0x3c,
	0x08, 0x76, 0x35, 0x90, 0x10, 0x2e, 0x3e, 0xa0, 0x2a, 0x99, 0xe0, 0x56, 0xab, 0x45, 0x77, 0x47,
	0xf2, 0x1c, 0x3a, 0xc3, 0x9c, 0x17, 0xe5, 0x22, 0xff, 0x86, 0x03, 0xb1, 0x92, 0x4b, 0xd4, 0x58,
	0xbd, 0xfb, 0xed, 0x00, 0x79, 0x04, 0x8d, 0xb7, 0xac, 0xa0, 0x68, 0xc6, 0xc1, 0xca, 0x07, 0xf4,
	0x00, 0x6c, 0x57, 0x4c, 0x2e, 0x50, 0x4d, 0x36, 0x4c, 0xa3, 0x7d, 0xc1, 0x16, 0x75, 0x91, 0xf1,
	0x71, 0x82, 0xea, 0x1a, 0xd5, 0xfb, 0x7c, 0x85, 0xf6, 0x09, 0x1b, 0xd4, 0x21, 0x66, 0x84, 0xc7,
	0x4a, 0x5c, 0xb3, 0x02, 0x47, 0x62, 0xc3, 0xcd, 0x74, 0xc5, 0x2f, 0xa1, 0x7d, 0x8c, 0x4a, 0x49,
	0x9e, 0xc1, 0x59, 0xc6, 0xec, 0xc4, 0xf9, 0x49, 0xb3, 0xdf, 0xb1, 0x7e, 0xdb, 0x68, 0x75, 0x93,
	0xda, 0x70, 0xfc, 0x1a, 0x2e, 0x5d, 0x6a, 0xd4, 0xd3, 0xe5, 0x52, 0x7c, 0x1f, 0xe4, 0xf3, 0xc5,
	0xd6, 0xf4, 0x80, 0x3a, 0x84, 0xdc, 0x85, 0x5a, 0xaa, 0x2b, 0xb7, 0x6b, 0xa9, 0xee, 0xff, 0x04,
	0x48, 0xa5, 0x1c, 0x6e, 0x37, 0x8d, 0xbc, 0x82, 0x4b, 0x77, 0x97, 0xc8, 0xfd, 0xdd, 0xf4, 0xba,
	0x1b, 0xd7, 0x7d, 0xf0, 0x0f, 0x5a, 0xca, 0xf8, 0x0e, 0xe9, 0xc1, 0x45, 0x35, 0x01, 0xe4, 0xca,
	0xde, 0x39, 0x6c, 0x50, 0xb7, 0x7d, 0x0c, 0xcc, 0xfd, 0xfe, 0x2f, 0x0f, 0xee, 0xa5, 0x52, 0x1a,
	0xeb, 0x05, 0x47, 0xae, 0x9d, 0x32, 0x5c, 0x3f, 0xaa, 0x32, 0x4e, 0x5c, 0xab, 0xca, 0x38, 0x35,
	0xee, 0xff, 0xcb, 0xf8, 0x54, 0xb7, 0x3f, 0x98, 0x17, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9d,
	0x0f, 0x34, 0x4d, 0x71, 0x04, 0x00, 0x00,
}
