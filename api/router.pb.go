// Code generated by protoc-gen-go. DO NOT EDIT.
// source: router.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UpdateAction int32

const (
	UpdateAction_UpdateNOOP   UpdateAction = 0
	UpdateAction_UpdateInsert UpdateAction = 1
	UpdateAction_UpdateAlter  UpdateAction = 2
	UpdateAction_UpdateDelete UpdateAction = 3
)

var UpdateAction_name = map[int32]string{
	0: "UpdateNOOP",
	1: "UpdateInsert",
	2: "UpdateAlter",
	3: "UpdateDelete",
}
var UpdateAction_value = map[string]int32{
	"UpdateNOOP":   0,
	"UpdateInsert": 1,
	"UpdateAlter":  2,
	"UpdateDelete": 3,
}

func (x UpdateAction) String() string {
	return proto.EnumName(UpdateAction_name, int32(x))
}
func (UpdateAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type ServiceConfigAction int32

const (
	ServiceConfigAction_Add    ServiceConfigAction = 0
	ServiceConfigAction_Remove ServiceConfigAction = 1
)

var ServiceConfigAction_name = map[int32]string{
	0: "Add",
	1: "Remove",
}
var ServiceConfigAction_value = map[string]int32{
	"Add":    0,
	"Remove": 1,
}

func (x ServiceConfigAction) String() string {
	return proto.EnumName(ServiceConfigAction_name, int32(x))
}
func (ServiceConfigAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type Consume int32

const (
	Consume_ConsumeNone Consume = 0
	Consume_ConsumeURL  Consume = 1
	Consume_ConsumeSPA  Consume = 2
)

var Consume_name = map[int32]string{
	0: "ConsumeNone",
	1: "ConsumeURL",
	2: "ConsumeSPA",
}
var Consume_value = map[string]int32{
	"ConsumeNone": 0,
	"ConsumeURL":  1,
	"ConsumeSPA":  2,
}

func (x Consume) String() string {
	return proto.EnumName(Consume_name, int32(x))
}
func (Consume) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type PotentialResource_ResourceType int32

const (
	PotentialResource_ResourceUnknown PotentialResource_ResourceType = 0
	PotentialResource_ResourceURL     PotentialResource_ResourceType = 1
	PotentialResource_ResourceSPACode PotentialResource_ResourceType = 2
	PotentialResource_ResourceAuth    PotentialResource_ResourceType = 4
	PotentialResource_ResourceQuery   PotentialResource_ResourceType = 5
)

var PotentialResource_ResourceType_name = map[int32]string{
	0: "ResourceUnknown",
	1: "ResourceURL",
	2: "ResourceSPACode",
	4: "ResourceAuth",
	5: "ResourceQuery",
}
var PotentialResource_ResourceType_value = map[string]int32{
	"ResourceUnknown": 0,
	"ResourceURL":     1,
	"ResourceSPACode": 2,
	"ResourceAuth":    4,
	"ResourceQuery":   5,
}

func (x PotentialResource_ResourceType) String() string {
	return proto.EnumName(PotentialResource_ResourceType_name, int32(x))
}
func (PotentialResource_ResourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{8, 0}
}

type NotifyReq struct {
	ServiceAddress string `protobuf:"bytes,1,opt,name=ServiceAddress" json:"ServiceAddress,omitempty"`
}

func (m *NotifyReq) Reset()                    { *m = NotifyReq{} }
func (m *NotifyReq) String() string            { return proto.CompactTextString(m) }
func (*NotifyReq) ProtoMessage()               {}
func (*NotifyReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *NotifyReq) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

type UpdateReq struct {
	Action UpdateAction `protobuf:"varint,1,opt,name=Action,enum=api.UpdateAction" json:"Action,omitempty"`
	Bind   string       `protobuf:"bytes,2,opt,name=Bind" json:"Bind,omitempty"`
	Host   []string     `protobuf:"bytes,3,rep,name=Host" json:"Host,omitempty"`
	Bundle []string     `protobuf:"bytes,4,rep,name=Bundle" json:"Bundle,omitempty"`
}

func (m *UpdateReq) Reset()                    { *m = UpdateReq{} }
func (m *UpdateReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateReq) ProtoMessage()               {}
func (*UpdateReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *UpdateReq) GetAction() UpdateAction {
	if m != nil {
		return m.Action
	}
	return UpdateAction_UpdateNOOP
}

func (m *UpdateReq) GetBind() string {
	if m != nil {
		return m.Bind
	}
	return ""
}

func (m *UpdateReq) GetHost() []string {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *UpdateReq) GetBundle() []string {
	if m != nil {
		return m.Bundle
	}
	return nil
}

type UpdateResp struct {
}

func (m *UpdateResp) Reset()                    { *m = UpdateResp{} }
func (m *UpdateResp) String() string            { return proto.CompactTextString(m) }
func (*UpdateResp) ProtoMessage()               {}
func (*UpdateResp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type ServiceConfigEndpoint struct {
	Name       string                `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Endpoint   string                `protobuf:"bytes,2,opt,name=Endpoint" json:"Endpoint,omitempty"`
	Configured []*ConfiguredResource `protobuf:"bytes,3,rep,name=Configured" json:"Configured,omitempty"`
}

func (m *ServiceConfigEndpoint) Reset()                    { *m = ServiceConfigEndpoint{} }
func (m *ServiceConfigEndpoint) String() string            { return proto.CompactTextString(m) }
func (*ServiceConfigEndpoint) ProtoMessage()               {}
func (*ServiceConfigEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *ServiceConfigEndpoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceConfigEndpoint) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *ServiceConfigEndpoint) GetConfigured() []*ConfiguredResource {
	if m != nil {
		return m.Configured
	}
	return nil
}

type ServiceConfig struct {
	Version string                   `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	Action  ServiceConfigAction      `protobuf:"varint,2,opt,name=Action,enum=api.ServiceConfigAction" json:"Action,omitempty"`
	List    []*ServiceConfigEndpoint `protobuf:"bytes,3,rep,name=List" json:"List,omitempty"`
}

func (m *ServiceConfig) Reset()                    { *m = ServiceConfig{} }
func (m *ServiceConfig) String() string            { return proto.CompactTextString(m) }
func (*ServiceConfig) ProtoMessage()               {}
func (*ServiceConfig) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *ServiceConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ServiceConfig) GetAction() ServiceConfigAction {
	if m != nil {
		return m.Action
	}
	return ServiceConfigAction_Add
}

func (m *ServiceConfig) GetList() []*ServiceConfigEndpoint {
	if m != nil {
		return m.List
	}
	return nil
}

type ConfigureURL struct {
	MapTo  string `protobuf:"bytes,1,opt,name=MapTo" json:"MapTo,omitempty"`
	Config string `protobuf:"bytes,2,opt,name=Config" json:"Config,omitempty"`
}

func (m *ConfigureURL) Reset()                    { *m = ConfigureURL{} }
func (m *ConfigureURL) String() string            { return proto.CompactTextString(m) }
func (*ConfigureURL) ProtoMessage()               {}
func (*ConfigureURL) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *ConfigureURL) GetMapTo() string {
	if m != nil {
		return m.MapTo
	}
	return ""
}

func (m *ConfigureURL) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

type ConfigureSPACode struct {
	// Configuration of the SPA component. Right now that would be a JSON string.
	//
	// In the future want to configure both client and server.
	Configuration string `protobuf:"bytes,1,opt,name=Configuration" json:"Configuration,omitempty"`
}

func (m *ConfigureSPACode) Reset()                    { *m = ConfigureSPACode{} }
func (m *ConfigureSPACode) String() string            { return proto.CompactTextString(m) }
func (*ConfigureSPACode) ProtoMessage()               {}
func (*ConfigureSPACode) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *ConfigureSPACode) GetConfiguration() string {
	if m != nil {
		return m.Configuration
	}
	return ""
}

type ConfigureQuery struct {
	DSN string `protobuf:"bytes,1,opt,name=DSN" json:"DSN,omitempty"`
}

func (m *ConfigureQuery) Reset()                    { *m = ConfigureQuery{} }
func (m *ConfigureQuery) String() string            { return proto.CompactTextString(m) }
func (*ConfigureQuery) ProtoMessage()               {}
func (*ConfigureQuery) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *ConfigureQuery) GetDSN() string {
	if m != nil {
		return m.DSN
	}
	return ""
}

type PotentialResource struct {
	Name    string                         `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Type    PotentialResource_ResourceType `protobuf:"varint,2,opt,name=Type,enum=api.PotentialResource_ResourceType" json:"Type,omitempty"`
	Consume Consume                        `protobuf:"varint,3,opt,name=Consume,enum=api.Consume" json:"Consume,omitempty"`
}

func (m *PotentialResource) Reset()                    { *m = PotentialResource{} }
func (m *PotentialResource) String() string            { return proto.CompactTextString(m) }
func (*PotentialResource) ProtoMessage()               {}
func (*PotentialResource) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *PotentialResource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PotentialResource) GetType() PotentialResource_ResourceType {
	if m != nil {
		return m.Type
	}
	return PotentialResource_ResourceUnknown
}

func (m *PotentialResource) GetConsume() Consume {
	if m != nil {
		return m.Consume
	}
	return Consume_ConsumeNone
}

type ConfiguredResource struct {
	Name                  string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	PotentialResourceName string `protobuf:"bytes,2,opt,name=PotentialResourceName" json:"PotentialResourceName,omitempty"`
	// Types that are valid to be assigned to Configuration:
	//	*ConfiguredResource_URL
	//	*ConfiguredResource_SPACode
	//	*ConfiguredResource_Auth
	//	*ConfiguredResource_Query
	Configuration isConfiguredResource_Configuration `protobuf_oneof:"Configuration"`
}

func (m *ConfiguredResource) Reset()                    { *m = ConfiguredResource{} }
func (m *ConfiguredResource) String() string            { return proto.CompactTextString(m) }
func (*ConfiguredResource) ProtoMessage()               {}
func (*ConfiguredResource) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

type isConfiguredResource_Configuration interface {
	isConfiguredResource_Configuration()
}

type ConfiguredResource_URL struct {
	URL *ConfigureURL `protobuf:"bytes,4,opt,name=URL,oneof"`
}
type ConfiguredResource_SPACode struct {
	SPACode *ConfigureSPACode `protobuf:"bytes,5,opt,name=SPACode,oneof"`
}
type ConfiguredResource_Auth struct {
	Auth *ConfigureAuth `protobuf:"bytes,6,opt,name=Auth,oneof"`
}
type ConfiguredResource_Query struct {
	Query *ConfigureQuery `protobuf:"bytes,7,opt,name=Query,oneof"`
}

func (*ConfiguredResource_URL) isConfiguredResource_Configuration()     {}
func (*ConfiguredResource_SPACode) isConfiguredResource_Configuration() {}
func (*ConfiguredResource_Auth) isConfiguredResource_Configuration()    {}
func (*ConfiguredResource_Query) isConfiguredResource_Configuration()   {}

func (m *ConfiguredResource) GetConfiguration() isConfiguredResource_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *ConfiguredResource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfiguredResource) GetPotentialResourceName() string {
	if m != nil {
		return m.PotentialResourceName
	}
	return ""
}

func (m *ConfiguredResource) GetURL() *ConfigureURL {
	if x, ok := m.GetConfiguration().(*ConfiguredResource_URL); ok {
		return x.URL
	}
	return nil
}

func (m *ConfiguredResource) GetSPACode() *ConfigureSPACode {
	if x, ok := m.GetConfiguration().(*ConfiguredResource_SPACode); ok {
		return x.SPACode
	}
	return nil
}

func (m *ConfiguredResource) GetAuth() *ConfigureAuth {
	if x, ok := m.GetConfiguration().(*ConfiguredResource_Auth); ok {
		return x.Auth
	}
	return nil
}

func (m *ConfiguredResource) GetQuery() *ConfigureQuery {
	if x, ok := m.GetConfiguration().(*ConfiguredResource_Query); ok {
		return x.Query
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ConfiguredResource) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ConfiguredResource_OneofMarshaler, _ConfiguredResource_OneofUnmarshaler, _ConfiguredResource_OneofSizer, []interface{}{
		(*ConfiguredResource_URL)(nil),
		(*ConfiguredResource_SPACode)(nil),
		(*ConfiguredResource_Auth)(nil),
		(*ConfiguredResource_Query)(nil),
	}
}

func _ConfiguredResource_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ConfiguredResource)
	// Configuration
	switch x := m.Configuration.(type) {
	case *ConfiguredResource_URL:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.URL); err != nil {
			return err
		}
	case *ConfiguredResource_SPACode:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SPACode); err != nil {
			return err
		}
	case *ConfiguredResource_Auth:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Auth); err != nil {
			return err
		}
	case *ConfiguredResource_Query:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Query); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ConfiguredResource.Configuration has unexpected type %T", x)
	}
	return nil
}

func _ConfiguredResource_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ConfiguredResource)
	switch tag {
	case 4: // Configuration.URL
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConfigureURL)
		err := b.DecodeMessage(msg)
		m.Configuration = &ConfiguredResource_URL{msg}
		return true, err
	case 5: // Configuration.SPACode
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConfigureSPACode)
		err := b.DecodeMessage(msg)
		m.Configuration = &ConfiguredResource_SPACode{msg}
		return true, err
	case 6: // Configuration.Auth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConfigureAuth)
		err := b.DecodeMessage(msg)
		m.Configuration = &ConfiguredResource_Auth{msg}
		return true, err
	case 7: // Configuration.Query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConfigureQuery)
		err := b.DecodeMessage(msg)
		m.Configuration = &ConfiguredResource_Query{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ConfiguredResource_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ConfiguredResource)
	// Configuration
	switch x := m.Configuration.(type) {
	case *ConfiguredResource_URL:
		s := proto.Size(x.URL)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ConfiguredResource_SPACode:
		s := proto.Size(x.SPACode)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ConfiguredResource_Auth:
		s := proto.Size(x.Auth)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ConfiguredResource_Query:
		s := proto.Size(x.Query)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Bundle struct {
	// Name of the bundle, relative to the service name.
	// May be "app" or "search-list-detail".
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	// Include list of other resources this bundle should include.
	Include []string `protobuf:"bytes,3,rep,name=Include" json:"Include,omitempty"`
}

func (m *Bundle) Reset()                    { *m = Bundle{} }
func (m *Bundle) String() string            { return proto.CompactTextString(m) }
func (*Bundle) ProtoMessage()               {}
func (*Bundle) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *Bundle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Bundle) GetInclude() []string {
	if m != nil {
		return m.Include
	}
	return nil
}

type LoginBundle struct {
	LoginState      LoginState `protobuf:"varint,1,opt,name=LoginState,enum=api.LoginState" json:"LoginState,omitempty"`
	Prefix          string     `protobuf:"bytes,2,opt,name=Prefix" json:"Prefix,omitempty"`
	ConsumeRedirect bool       `protobuf:"varint,3,opt,name=ConsumeRedirect" json:"ConsumeRedirect,omitempty"`
	Bundle          string     `protobuf:"bytes,4,opt,name=Bundle" json:"Bundle,omitempty"`
}

func (m *LoginBundle) Reset()                    { *m = LoginBundle{} }
func (m *LoginBundle) String() string            { return proto.CompactTextString(m) }
func (*LoginBundle) ProtoMessage()               {}
func (*LoginBundle) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *LoginBundle) GetLoginState() LoginState {
	if m != nil {
		return m.LoginState
	}
	return LoginState_Missing
}

func (m *LoginBundle) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *LoginBundle) GetConsumeRedirect() bool {
	if m != nil {
		return m.ConsumeRedirect
	}
	return false
}

func (m *LoginBundle) GetBundle() string {
	if m != nil {
		return m.Bundle
	}
	return ""
}

type ApplicationBundle struct {
	// Associate a login state with a single bundle.
	LoginBundle []*LoginBundle `protobuf:"bytes,5,rep,name=LoginBundle" json:"LoginBundle,omitempty"`
	// Configured resource for the authenticator.
	AuthConfiguredResource string `protobuf:"bytes,6,opt,name=AuthConfiguredResource" json:"AuthConfiguredResource,omitempty"`
	// Setup the host names to bind to.
	Host []string `protobuf:"bytes,7,rep,name=Host" json:"Host,omitempty"`
}

func (m *ApplicationBundle) Reset()                    { *m = ApplicationBundle{} }
func (m *ApplicationBundle) String() string            { return proto.CompactTextString(m) }
func (*ApplicationBundle) ProtoMessage()               {}
func (*ApplicationBundle) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *ApplicationBundle) GetLoginBundle() []*LoginBundle {
	if m != nil {
		return m.LoginBundle
	}
	return nil
}

func (m *ApplicationBundle) GetAuthConfiguredResource() string {
	if m != nil {
		return m.AuthConfiguredResource
	}
	return ""
}

func (m *ApplicationBundle) GetHost() []string {
	if m != nil {
		return m.Host
	}
	return nil
}

type ServiceBundle struct {
	// Name is the base name for this service.
	// If something references  "solidcoredata.org/example-1/app" and the base
	// name is "solidcoredata.org/example-1", then the component name that is sent is "app".
	// "solidcoredata.org/example-1" or "solidcoredata.org/library-1".
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	// 1. Define the resource with PotentialResource.
	Potential []*PotentialResource `protobuf:"bytes,2,rep,name=Potential" json:"Potential,omitempty"`
	// 2. Configure the resource with ConfiguredResource.
	Configured []*ConfiguredResource `protobuf:"bytes,3,rep,name=Configured" json:"Configured,omitempty"`
	// 3. Bundle Configured Resources or other Bundles together
	// with a Bundle.
	Bundle []*Bundle `protobuf:"bytes,4,rep,name=Bundle" json:"Bundle,omitempty"`
	// 4. Bundle Login bundles together with an auth configured resource and
	// host name list to define an application that can be served.
	Application []*ApplicationBundle `protobuf:"bytes,5,rep,name=Application" json:"Application,omitempty"`
}

func (m *ServiceBundle) Reset()                    { *m = ServiceBundle{} }
func (m *ServiceBundle) String() string            { return proto.CompactTextString(m) }
func (*ServiceBundle) ProtoMessage()               {}
func (*ServiceBundle) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *ServiceBundle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceBundle) GetPotential() []*PotentialResource {
	if m != nil {
		return m.Potential
	}
	return nil
}

func (m *ServiceBundle) GetConfigured() []*ConfiguredResource {
	if m != nil {
		return m.Configured
	}
	return nil
}

func (m *ServiceBundle) GetBundle() []*Bundle {
	if m != nil {
		return m.Bundle
	}
	return nil
}

func (m *ServiceBundle) GetApplication() []*ApplicationBundle {
	if m != nil {
		return m.Application
	}
	return nil
}

func init() {
	proto.RegisterType((*NotifyReq)(nil), "api.NotifyReq")
	proto.RegisterType((*UpdateReq)(nil), "api.UpdateReq")
	proto.RegisterType((*UpdateResp)(nil), "api.UpdateResp")
	proto.RegisterType((*ServiceConfigEndpoint)(nil), "api.ServiceConfigEndpoint")
	proto.RegisterType((*ServiceConfig)(nil), "api.ServiceConfig")
	proto.RegisterType((*ConfigureURL)(nil), "api.ConfigureURL")
	proto.RegisterType((*ConfigureSPACode)(nil), "api.ConfigureSPACode")
	proto.RegisterType((*ConfigureQuery)(nil), "api.ConfigureQuery")
	proto.RegisterType((*PotentialResource)(nil), "api.PotentialResource")
	proto.RegisterType((*ConfiguredResource)(nil), "api.ConfiguredResource")
	proto.RegisterType((*Bundle)(nil), "api.Bundle")
	proto.RegisterType((*LoginBundle)(nil), "api.LoginBundle")
	proto.RegisterType((*ApplicationBundle)(nil), "api.ApplicationBundle")
	proto.RegisterType((*ServiceBundle)(nil), "api.ServiceBundle")
	proto.RegisterEnum("api.UpdateAction", UpdateAction_name, UpdateAction_value)
	proto.RegisterEnum("api.ServiceConfigAction", ServiceConfigAction_name, ServiceConfigAction_value)
	proto.RegisterEnum("api.Consume", Consume_name, Consume_value)
	proto.RegisterEnum("api.PotentialResource_ResourceType", PotentialResource_ResourceType_name, PotentialResource_ResourceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Routes service

type RoutesClient interface {
	UpdateServiceBundle(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (Routes_UpdateServiceBundleClient, error)
	// Update connected services information, such as other service locations and SPA code and configs.
	UpdateServiceConfig(ctx context.Context, in *ServiceConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type routesClient struct {
	cc *grpc.ClientConn
}

func NewRoutesClient(cc *grpc.ClientConn) RoutesClient {
	return &routesClient{cc}
}

func (c *routesClient) UpdateServiceBundle(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (Routes_UpdateServiceBundleClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Routes_serviceDesc.Streams[0], c.cc, "/api.Routes/UpdateServiceBundle", opts...)
	if err != nil {
		return nil, err
	}
	x := &routesUpdateServiceBundleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Routes_UpdateServiceBundleClient interface {
	Recv() (*ServiceBundle, error)
	grpc.ClientStream
}

type routesUpdateServiceBundleClient struct {
	grpc.ClientStream
}

func (x *routesUpdateServiceBundleClient) Recv() (*ServiceBundle, error) {
	m := new(ServiceBundle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routesClient) UpdateServiceConfig(ctx context.Context, in *ServiceConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/api.Routes/UpdateServiceConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Routes service

type RoutesServer interface {
	UpdateServiceBundle(*google_protobuf1.Empty, Routes_UpdateServiceBundleServer) error
	// Update connected services information, such as other service locations and SPA code and configs.
	UpdateServiceConfig(context.Context, *ServiceConfig) (*google_protobuf1.Empty, error)
}

func RegisterRoutesServer(s *grpc.Server, srv RoutesServer) {
	s.RegisterService(&_Routes_serviceDesc, srv)
}

func _Routes_UpdateServiceBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutesServer).UpdateServiceBundle(m, &routesUpdateServiceBundleServer{stream})
}

type Routes_UpdateServiceBundleServer interface {
	Send(*ServiceBundle) error
	grpc.ServerStream
}

type routesUpdateServiceBundleServer struct {
	grpc.ServerStream
}

func (x *routesUpdateServiceBundleServer) Send(m *ServiceBundle) error {
	return x.ServerStream.SendMsg(m)
}

func _Routes_UpdateServiceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateServiceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Routes/UpdateServiceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateServiceConfig(ctx, req.(*ServiceConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _Routes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Routes",
	HandlerType: (*RoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateServiceConfig",
			Handler:    _Routes_UpdateServiceConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateServiceBundle",
			Handler:       _Routes_UpdateServiceBundle_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "router.proto",
}

// Client API for RouterConfiguration service

type RouterConfigurationClient interface {
	Notify(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
}

type routerConfigurationClient struct {
	cc *grpc.ClientConn
}

func NewRouterConfigurationClient(cc *grpc.ClientConn) RouterConfigurationClient {
	return &routerConfigurationClient{cc}
}

func (c *routerConfigurationClient) Notify(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/api.RouterConfiguration/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerConfigurationClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := grpc.Invoke(ctx, "/api.RouterConfiguration/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouterConfiguration service

type RouterConfigurationServer interface {
	Notify(context.Context, *NotifyReq) (*google_protobuf1.Empty, error)
	Update(context.Context, *UpdateReq) (*UpdateResp, error)
}

func RegisterRouterConfigurationServer(s *grpc.Server, srv RouterConfigurationServer) {
	s.RegisterService(&_RouterConfiguration_serviceDesc, srv)
}

func _RouterConfiguration_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterConfigurationServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RouterConfiguration/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterConfigurationServer).Notify(ctx, req.(*NotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterConfiguration_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterConfigurationServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RouterConfiguration/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterConfigurationServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouterConfiguration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.RouterConfiguration",
	HandlerType: (*RouterConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _RouterConfiguration_Notify_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RouterConfiguration_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "router.proto",
}

func init() { proto.RegisterFile("router.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 937 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x16, 0xf5, 0x8c, 0x46, 0xb2, 0x44, 0xaf, 0x6a, 0x97, 0x50, 0x2f, 0x06, 0xd3, 0x06, 0xae,
	0x0b, 0xc8, 0xa9, 0x12, 0x24, 0x41, 0xd1, 0x0b, 0xed, 0x04, 0x50, 0x00, 0x55, 0x51, 0x57, 0x71,
	0xef, 0x8c, 0xb8, 0x76, 0x88, 0xca, 0x5c, 0x96, 0x5c, 0xba, 0xf5, 0xad, 0xf7, 0x5e, 0x0a, 0xf4,
	0xd2, 0x63, 0xff, 0x62, 0x6f, 0x3d, 0x16, 0x3b, 0xbb, 0xcb, 0x87, 0x24, 0xf7, 0xd0, 0xdb, 0xce,
	0xcc, 0x37, 0xc3, 0x99, 0x6f, 0x77, 0x66, 0x08, 0xfd, 0x84, 0x67, 0x82, 0x25, 0x93, 0x38, 0xe1,
	0x82, 0x93, 0x86, 0x1f, 0x87, 0xe3, 0xcf, 0x6e, 0x38, 0xbf, 0xd9, 0xb0, 0x73, 0x54, 0x7d, 0xc8,
	0xae, 0xcf, 0xd9, 0x6d, 0x2c, 0xee, 0x15, 0x62, 0x0c, 0x7e, 0x26, 0x3e, 0xaa, 0xb3, 0xfb, 0x0c,
	0xba, 0x0b, 0x2e, 0xc2, 0xeb, 0x7b, 0xca, 0x7e, 0x22, 0x4f, 0x60, 0xb0, 0x62, 0xc9, 0x5d, 0xb8,
	0x66, 0x5e, 0x10, 0x24, 0x2c, 0x4d, 0x1d, 0xeb, 0xc4, 0x3a, 0xed, 0xd2, 0x2d, 0xad, 0x7b, 0x07,
	0xdd, 0xab, 0x38, 0xf0, 0x05, 0x93, 0x4e, 0x5f, 0x42, 0xdb, 0x5b, 0x8b, 0x90, 0x47, 0x08, 0x1e,
	0x4c, 0x0f, 0x27, 0x7e, 0x1c, 0x4e, 0x94, 0x5d, 0x19, 0xa8, 0x06, 0x10, 0x02, 0xcd, 0x8b, 0x30,
	0x0a, 0x9c, 0x3a, 0x46, 0xc5, 0xb3, 0xd4, 0xcd, 0x78, 0x2a, 0x9c, 0xc6, 0x49, 0x43, 0xea, 0xe4,
	0x99, 0x1c, 0x43, 0xfb, 0x22, 0x8b, 0x82, 0x0d, 0x73, 0x9a, 0xa8, 0xd5, 0x92, 0xdb, 0x07, 0x30,
	0xdf, 0x4d, 0x63, 0xf7, 0x57, 0x0b, 0x8e, 0x74, 0x62, 0x97, 0x3c, 0xba, 0x0e, 0x6f, 0xde, 0x44,
	0x41, 0xcc, 0xc3, 0x48, 0xc8, 0x98, 0x0b, 0xff, 0x96, 0xe9, 0xec, 0xf1, 0x4c, 0xc6, 0xf0, 0xc8,
	0xd8, 0xf5, 0xf7, 0x73, 0x99, 0xbc, 0x04, 0x50, 0x11, 0xb2, 0x84, 0x05, 0x98, 0x49, 0x6f, 0xfa,
	0x29, 0x96, 0x51, 0xa8, 0x29, 0x4b, 0x79, 0x96, 0xac, 0x19, 0x2d, 0x41, 0xdd, 0xdf, 0x2c, 0x38,
	0xa8, 0xa4, 0x40, 0x1c, 0xe8, 0xfc, 0xc0, 0x92, 0xd4, 0xd0, 0xd1, 0xa5, 0x46, 0x24, 0x4f, 0x73,
	0x9e, 0xea, 0xc8, 0x93, 0x83, 0x1f, 0xa8, 0x78, 0x6f, 0xd1, 0x35, 0x81, 0xe6, 0x3c, 0xd4, 0xd4,
	0xf4, 0xa6, 0xe3, 0x5d, 0xbc, 0x29, 0x80, 0x22, 0xce, 0xfd, 0x16, 0xfa, 0x79, 0x6e, 0x57, 0x74,
	0x4e, 0x3e, 0x81, 0xd6, 0x77, 0x7e, 0xfc, 0x9e, 0xeb, 0x4c, 0x94, 0x20, 0xc9, 0x55, 0x28, 0x4d,
	0x83, 0x96, 0xdc, 0x57, 0x60, 0xe7, 0xde, 0xab, 0xa5, 0x77, 0xc9, 0x03, 0x46, 0x3e, 0x87, 0x03,
	0xa3, 0xf3, 0x45, 0x51, 0x53, 0x55, 0xe9, 0xba, 0x30, 0xc8, 0x3d, 0xbf, 0xcf, 0x58, 0x72, 0x4f,
	0x6c, 0x68, 0xbc, 0x5e, 0x2d, 0x34, 0x5a, 0x1e, 0xdd, 0x7f, 0x2c, 0x38, 0x5c, 0x72, 0xc1, 0x22,
	0x11, 0xfa, 0x1b, 0xc3, 0xe5, 0xde, 0x8b, 0x7a, 0x09, 0xcd, 0xf7, 0xf7, 0x31, 0xd3, 0x2c, 0x3d,
	0xc6, 0xaa, 0x77, 0x3c, 0x27, 0xe6, 0x20, 0xa1, 0x14, 0x1d, 0xc8, 0x13, 0xe8, 0x5c, 0xf2, 0x28,
	0xcd, 0x6e, 0x99, 0xd3, 0x40, 0xdf, 0xbe, 0xb9, 0x42, 0xa9, 0xa3, 0xc6, 0xe8, 0x46, 0xd0, 0x2f,
	0x7b, 0x93, 0x11, 0x0c, 0x8d, 0x7c, 0x15, 0xfd, 0x18, 0xf1, 0x9f, 0x23, 0xbb, 0x46, 0x86, 0xd0,
	0xcb, 0x95, 0x74, 0x6e, 0x5b, 0x65, 0x94, 0x66, 0xc7, 0xae, 0x13, 0xbb, 0x08, 0xe5, 0x65, 0xe2,
	0xa3, 0xdd, 0x24, 0x87, 0x70, 0x60, 0x34, 0x48, 0x85, 0xdd, 0x72, 0xff, 0xaa, 0x03, 0xd9, 0x7d,
	0x47, 0x7b, 0x6b, 0x7f, 0x0e, 0x47, 0x3b, 0xa5, 0x22, 0x48, 0x5d, 0xd5, 0x7e, 0x23, 0xf9, 0x02,
	0x1a, 0x57, 0x74, 0xee, 0x34, 0x4f, 0xac, 0xd3, 0x9e, 0x6e, 0xbf, 0xf2, 0x3b, 0x98, 0xd5, 0xa8,
	0xb4, 0x93, 0xaf, 0xa1, 0xa3, 0x33, 0x77, 0x5a, 0x08, 0x3d, 0xaa, 0x42, 0xb5, 0x71, 0x56, 0xa3,
	0x06, 0x47, 0x4e, 0xa1, 0x29, 0xeb, 0x72, 0xda, 0x88, 0x27, 0x55, 0xbc, 0xb4, 0xcc, 0x6a, 0x14,
	0x11, 0xe4, 0x2b, 0x68, 0x61, 0xbd, 0x4e, 0x07, 0xa1, 0xa3, 0x2a, 0x14, 0x4d, 0xb3, 0x1a, 0x55,
	0x98, 0x8b, 0xe1, 0xd6, 0xb3, 0x72, 0x5f, 0x98, 0x86, 0xdf, 0xcb, 0x8a, 0x03, 0x9d, 0xb7, 0xd1,
	0x7a, 0x93, 0x05, 0x4c, 0x4f, 0x09, 0x23, 0xba, 0x7f, 0x5a, 0xd0, 0x9b, 0xf3, 0x9b, 0x30, 0xd2,
	0xde, 0xe7, 0x00, 0x28, 0xae, 0x84, 0x2f, 0x98, 0x9e, 0x47, 0x43, 0x4c, 0xa5, 0x50, 0xd3, 0x12,
	0x44, 0x36, 0xc3, 0x32, 0x61, 0xd7, 0xe1, 0x2f, 0xa6, 0x19, 0x94, 0x44, 0x4e, 0x61, 0x68, 0xde,
	0x0d, 0x0b, 0xc2, 0x84, 0xad, 0x05, 0xbe, 0xa9, 0x47, 0x74, 0x5b, 0x5d, 0x99, 0x55, 0x56, 0x69,
	0x56, 0xfd, 0x61, 0xc1, 0xa1, 0x17, 0xc7, 0x9b, 0x70, 0x8d, 0x25, 0xea, 0x04, 0xa7, 0x95, 0x7c,
	0x9d, 0x16, 0x76, 0xb6, 0x5d, 0x64, 0xa8, 0xf4, 0xb4, 0x52, 0xd4, 0x0b, 0x38, 0x96, 0x14, 0xef,
	0x3e, 0x21, 0xbc, 0x96, 0x2e, 0x7d, 0xc0, 0x9a, 0x4f, 0xd6, 0x4e, 0x31, 0x59, 0xdd, 0xbf, 0x8b,
	0x81, 0xf5, 0x1f, 0x84, 0x3f, 0x87, 0x6e, 0xfe, 0xd2, 0x9c, 0x3a, 0xe6, 0x78, 0xbc, 0xbf, 0x0f,
	0x69, 0x01, 0xfc, 0xdf, 0x53, 0x94, 0x3c, 0xae, 0x8c, 0xfb, 0xde, 0xb4, 0x87, 0x4e, 0x9a, 0x0a,
	0xf3, 0x30, 0x5e, 0x41, 0xaf, 0x44, 0xa7, 0x66, 0x4e, 0x65, 0xb5, 0x43, 0x33, 0x2d, 0x43, 0xcf,
	0x56, 0xd0, 0x2f, 0x6f, 0x23, 0x32, 0x30, 0x5b, 0x64, 0xf1, 0xee, 0xdd, 0xd2, 0xae, 0xc9, 0x26,
	0x56, 0xf2, 0xdb, 0x28, 0x65, 0x89, 0xb0, 0x2d, 0xd9, 0xfc, 0xda, 0x63, 0x23, 0x58, 0xa2, 0xfa,
	0x5c, 0x29, 0x5e, 0xb3, 0x0d, 0x13, 0xcc, 0x6e, 0x9c, 0x9d, 0xc1, 0x68, 0xcf, 0xe8, 0x26, 0x1d,
	0x68, 0x78, 0x41, 0x60, 0xd7, 0x08, 0x40, 0x9b, 0xb2, 0x5b, 0x7e, 0xc7, 0x6c, 0xeb, 0xec, 0x9b,
	0x7c, 0x30, 0xc9, 0xc8, 0xfa, 0xb8, 0xe0, 0x11, 0xb3, 0x6b, 0x32, 0x19, 0xad, 0x50, 0x63, 0xa6,
	0x90, 0x57, 0x4b, 0xcf, 0xae, 0x4f, 0x7f, 0xb7, 0xa0, 0x4d, 0xe5, 0x7a, 0x4f, 0xc9, 0x25, 0x8c,
	0x54, 0x12, 0xd5, 0x0b, 0x3c, 0x9e, 0xa8, 0x5d, 0x3f, 0x31, 0xbb, 0x7e, 0xf2, 0x46, 0xee, 0xfa,
	0x31, 0x29, 0xef, 0x0b, 0x85, 0x7d, 0x6a, 0x11, 0x6f, 0x2b, 0x88, 0x5e, 0x5b, 0x64, 0x77, 0xb9,
	0x8c, 0x1f, 0x08, 0x3c, 0x4d, 0x60, 0x84, 0x19, 0x25, 0x95, 0x1e, 0x96, 0xfb, 0x4d, 0xfd, 0x49,
	0x90, 0x01, 0x06, 0xcb, 0x7f, 0x2b, 0x1e, 0x0a, 0x24, 0xff, 0x1c, 0x54, 0x2e, 0xda, 0x23, 0xff,
	0xa7, 0x18, 0x0f, 0x2b, 0x72, 0x1a, 0x7f, 0x68, 0xa3, 0xeb, 0xb3, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xa2, 0xe1, 0x58, 0x04, 0xeb, 0x08, 0x00, 0x00,
}
