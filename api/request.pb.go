// Code generated by protoc-gen-go. DO NOT EDIT.
// source: request.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RequestReq struct {
	Host string `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
	// Method specifies the HTTP method (GET, POST, PUT, etc.).
	Method string `protobuf:"bytes,2,opt,name=Method" json:"Method,omitempty"`
	// URL specifies either the URI being requested.
	URL *URL `protobuf:"bytes,3,opt,name=URL" json:"URL,omitempty"`
	// The protocol version for incoming server requests.
	ProtoMajor  int32         `protobuf:"varint,4,opt,name=ProtoMajor" json:"ProtoMajor,omitempty"`
	ProtoMinor  int32         `protobuf:"varint,5,opt,name=ProtoMinor" json:"ProtoMinor,omitempty"`
	Header      *KeyValueList `protobuf:"bytes,6,opt,name=Header" json:"Header,omitempty"`
	Body        []byte        `protobuf:"bytes,7,opt,name=Body,proto3" json:"Body,omitempty"`
	ContentType string        `protobuf:"bytes,8,opt,name=ContentType" json:"ContentType,omitempty"`
	// RemoteAddr allows HTTP servers and other software to record
	// the network address that sent the request, usually for
	// logging. This field is not filled in by ReadRequest and
	// has no defined format. The HTTP server in this package
	// sets RemoteAddr to an "IP:port" address before invoking a
	// handler.
	RemoteAddr string           `protobuf:"bytes,9,opt,name=RemoteAddr" json:"RemoteAddr,omitempty"`
	TLS        *TLSState        `protobuf:"bytes,10,opt,name=TLS" json:"TLS,omitempty"`
	Auth       *RequestAuthResp `protobuf:"bytes,11,opt,name=Auth" json:"Auth,omitempty"`
}

func (m *RequestReq) Reset()                    { *m = RequestReq{} }
func (m *RequestReq) String() string            { return proto.CompactTextString(m) }
func (*RequestReq) ProtoMessage()               {}
func (*RequestReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RequestReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *RequestReq) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RequestReq) GetURL() *URL {
	if m != nil {
		return m.URL
	}
	return nil
}

func (m *RequestReq) GetProtoMajor() int32 {
	if m != nil {
		return m.ProtoMajor
	}
	return 0
}

func (m *RequestReq) GetProtoMinor() int32 {
	if m != nil {
		return m.ProtoMinor
	}
	return 0
}

func (m *RequestReq) GetHeader() *KeyValueList {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RequestReq) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *RequestReq) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *RequestReq) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *RequestReq) GetTLS() *TLSState {
	if m != nil {
		return m.TLS
	}
	return nil
}

func (m *RequestReq) GetAuth() *RequestAuthResp {
	if m != nil {
		return m.Auth
	}
	return nil
}

type RequestResp struct {
	Header *KeyValueList `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	// Content type of the body.
	ContentType string `protobuf:"bytes,2,opt,name=ContentType" json:"ContentType,omitempty"`
	// Encoding of the response. Often a compression method like "gzip" or "br".
	Encoding string `protobuf:"bytes,3,opt,name=Encoding" json:"Encoding,omitempty"`
	Body     []byte `protobuf:"bytes,4,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (m *RequestResp) Reset()                    { *m = RequestResp{} }
func (m *RequestResp) String() string            { return proto.CompactTextString(m) }
func (*RequestResp) ProtoMessage()               {}
func (*RequestResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RequestResp) GetHeader() *KeyValueList {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RequestResp) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *RequestResp) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *RequestResp) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type RepeatedString struct {
	Value []string `protobuf:"bytes,1,rep,name=Value" json:"Value,omitempty"`
}

func (m *RepeatedString) Reset()                    { *m = RepeatedString{} }
func (m *RepeatedString) String() string            { return proto.CompactTextString(m) }
func (*RepeatedString) ProtoMessage()               {}
func (*RepeatedString) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RepeatedString) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type URL struct {
	Host  string        `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
	Path  string        `protobuf:"bytes,2,opt,name=Path" json:"Path,omitempty"`
	Query *KeyValueList `protobuf:"bytes,3,opt,name=Query" json:"Query,omitempty"`
}

func (m *URL) Reset()                    { *m = URL{} }
func (m *URL) String() string            { return proto.CompactTextString(m) }
func (*URL) ProtoMessage()               {}
func (*URL) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *URL) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *URL) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *URL) GetQuery() *KeyValueList {
	if m != nil {
		return m.Query
	}
	return nil
}

type KeyValueList struct {
	Values map[string]*RepeatedString `protobuf:"bytes,1,rep,name=Values" json:"Values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *KeyValueList) Reset()                    { *m = KeyValueList{} }
func (m *KeyValueList) String() string            { return proto.CompactTextString(m) }
func (*KeyValueList) ProtoMessage()               {}
func (*KeyValueList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *KeyValueList) GetValues() map[string]*RepeatedString {
	if m != nil {
		return m.Values
	}
	return nil
}

type TLSState struct {
	Version           uint32 `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	HandshakeComplete bool   `protobuf:"varint,2,opt,name=HandshakeComplete" json:"HandshakeComplete,omitempty"`
	DidResume         bool   `protobuf:"varint,3,opt,name=DidResume" json:"DidResume,omitempty"`
	CipherSuite       uint32 `protobuf:"varint,4,opt,name=CipherSuite" json:"CipherSuite,omitempty"`
	ServerName        string `protobuf:"bytes,5,opt,name=ServerName" json:"ServerName,omitempty"`
}

func (m *TLSState) Reset()                    { *m = TLSState{} }
func (m *TLSState) String() string            { return proto.CompactTextString(m) }
func (*TLSState) ProtoMessage()               {}
func (*TLSState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *TLSState) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TLSState) GetHandshakeComplete() bool {
	if m != nil {
		return m.HandshakeComplete
	}
	return false
}

func (m *TLSState) GetDidResume() bool {
	if m != nil {
		return m.DidResume
	}
	return false
}

func (m *TLSState) GetCipherSuite() uint32 {
	if m != nil {
		return m.CipherSuite
	}
	return 0
}

func (m *TLSState) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestReq)(nil), "api.RequestReq")
	proto.RegisterType((*RequestResp)(nil), "api.RequestResp")
	proto.RegisterType((*RepeatedString)(nil), "api.RepeatedString")
	proto.RegisterType((*URL)(nil), "api.URL")
	proto.RegisterType((*KeyValueList)(nil), "api.KeyValueList")
	proto.RegisterType((*TLSState)(nil), "api.TLSState")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RequestHander service

type RequestHanderClient interface {
	Request(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*RequestResp, error)
}

type requestHanderClient struct {
	cc *grpc.ClientConn
}

func NewRequestHanderClient(cc *grpc.ClientConn) RequestHanderClient {
	return &requestHanderClient{cc}
}

func (c *requestHanderClient) Request(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*RequestResp, error) {
	out := new(RequestResp)
	err := grpc.Invoke(ctx, "/api.RequestHander/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RequestHander service

type RequestHanderServer interface {
	Request(context.Context, *RequestReq) (*RequestResp, error)
}

func RegisterRequestHanderServer(s *grpc.Server, srv RequestHanderServer) {
	s.RegisterService(&_RequestHander_serviceDesc, srv)
}

func _RequestHander_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHanderServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RequestHander/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHanderServer).Request(ctx, req.(*RequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RequestHander_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.RequestHander",
	HandlerType: (*RequestHanderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _RequestHander_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "request.proto",
}

func init() { proto.RegisterFile("request.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xdf, 0x4e, 0xd4, 0x4e,
	0x14, 0xc7, 0xd3, 0xed, 0xee, 0xd2, 0x9e, 0xb2, 0xbf, 0x1f, 0x8c, 0xc4, 0x4c, 0x36, 0xfe, 0x69,
	0x7a, 0xa1, 0x25, 0x21, 0x7b, 0x81, 0x31, 0x31, 0x26, 0x5e, 0x20, 0x92, 0x90, 0xb8, 0x10, 0x3c,
	0x05, 0xee, 0x47, 0x7b, 0x62, 0x2b, 0x6c, 0xa7, 0x4c, 0xa7, 0x24, 0x7d, 0x05, 0xef, 0x7d, 0x11,
	0x9f, 0xc8, 0x47, 0x31, 0x3d, 0x2d, 0x50, 0x85, 0xc4, 0xbb, 0x39, 0x9f, 0xf3, 0xdd, 0xf3, 0x7f,
	0x0b, 0x33, 0x43, 0x57, 0x35, 0x55, 0x76, 0x51, 0x1a, 0x6d, 0xb5, 0x70, 0x55, 0x99, 0xcf, 0x41,
	0xd5, 0x36, 0xeb, 0x40, 0xf4, 0x6b, 0x04, 0x80, 0x9d, 0x04, 0xe9, 0x4a, 0x08, 0x18, 0x1f, 0xea,
	0xca, 0x4a, 0x27, 0x74, 0x62, 0x1f, 0xf9, 0x2d, 0x1e, 0xc3, 0xf4, 0x88, 0x6c, 0xa6, 0x53, 0x39,
	0x62, 0xda, 0x5b, 0x62, 0x0e, 0xee, 0x19, 0x2e, 0xa5, 0x1b, 0x3a, 0x71, 0xb0, 0xeb, 0x2d, 0x54,
	0x99, 0x2f, 0xce, 0x70, 0x89, 0x2d, 0x14, 0xcf, 0x00, 0x4e, 0xda, 0xf8, 0x47, 0xea, 0x9b, 0x36,
	0x72, 0x1c, 0x3a, 0xf1, 0x04, 0x07, 0xe4, 0xce, 0x9f, 0x17, 0xda, 0xc8, 0xc9, 0xd0, 0xdf, 0x12,
	0xb1, 0x0d, 0xd3, 0x43, 0x52, 0x29, 0x19, 0x39, 0xe5, 0xf0, 0x9b, 0x1c, 0xfe, 0x23, 0x35, 0xe7,
	0xea, 0xb2, 0xa6, 0x65, 0x5e, 0x59, 0xec, 0x05, 0x6d, 0xc9, 0xef, 0x75, 0xda, 0xc8, 0xb5, 0xd0,
	0x89, 0xd7, 0x91, 0xdf, 0x22, 0x84, 0x60, 0x5f, 0x17, 0x96, 0x0a, 0x7b, 0xda, 0x94, 0x24, 0x3d,
	0xae, 0x7b, 0x88, 0xda, 0x02, 0x90, 0x56, 0xda, 0xd2, 0x5e, 0x9a, 0x1a, 0xe9, 0xb3, 0x60, 0x40,
	0xc4, 0x73, 0x70, 0x4f, 0x97, 0x89, 0x04, 0xce, 0x3e, 0xe3, 0xec, 0xa7, 0xcb, 0x24, 0xb1, 0xca,
	0x12, 0xb6, 0x1e, 0x11, 0xc3, 0x78, 0xaf, 0xb6, 0x99, 0x0c, 0x58, 0xb1, 0xc5, 0x8a, 0x7e, 0x90,
	0x2d, 0x47, 0xaa, 0x4a, 0x64, 0x45, 0xf4, 0xdd, 0x81, 0xe0, 0x76, 0xc4, 0x55, 0x39, 0xe8, 0xcd,
	0xf9, 0x57, 0x6f, 0x7f, 0xf5, 0x31, 0xba, 0xdf, 0xc7, 0x1c, 0xbc, 0x83, 0xe2, 0x8b, 0x4e, 0xf3,
	0xe2, 0x2b, 0x6f, 0xc2, 0xc7, 0x5b, 0xfb, 0x76, 0x32, 0xe3, 0xbb, 0xc9, 0x44, 0x2f, 0xe0, 0x3f,
	0xa4, 0x92, 0x94, 0xa5, 0x34, 0xb1, 0xa6, 0x55, 0x6d, 0xc1, 0x84, 0x13, 0x4b, 0x27, 0x74, 0x63,
	0x1f, 0x3b, 0x23, 0x3a, 0xe7, 0xe5, 0x3e, 0x78, 0x0f, 0x02, 0xc6, 0x27, 0xca, 0x66, 0x7d, 0x35,
	0xfc, 0x16, 0x2f, 0x61, 0xf2, 0xa9, 0x26, 0xd3, 0xf4, 0xd7, 0xf0, 0x40, 0x4b, 0x9d, 0x3f, 0xfa,
	0xe1, 0xc0, 0xfa, 0x90, 0x8b, 0xd7, 0x30, 0x65, 0xa3, 0xe2, 0xfc, 0xc1, 0xee, 0xd3, 0x7b, 0x3f,
	0x5d, 0x74, 0xfe, 0x83, 0xc2, 0x9a, 0x06, 0x7b, 0xf1, 0xfc, 0x18, 0x82, 0x01, 0x16, 0x1b, 0xe0,
	0x5e, 0x50, 0xd3, 0x97, 0xd9, 0x3e, 0xc5, 0x36, 0x4c, 0xae, 0xb9, 0xad, 0x11, 0x57, 0xf4, 0xa8,
	0x5f, 0xd0, 0xb0, 0x75, 0xec, 0x14, 0x6f, 0x47, 0x6f, 0x9c, 0xe8, 0xa7, 0x03, 0xde, 0xcd, 0x82,
	0x85, 0x84, 0xb5, 0x73, 0x32, 0x55, 0xae, 0x0b, 0x8e, 0x38, 0xc3, 0x1b, 0x53, 0xec, 0xc0, 0xe6,
	0xa1, 0x2a, 0xd2, 0x2a, 0x53, 0x17, 0xb4, 0xaf, 0x57, 0xe5, 0x25, 0xd9, 0x2e, 0x83, 0x87, 0xf7,
	0x1d, 0xe2, 0x09, 0xf8, 0x1f, 0xf2, 0x14, 0xa9, 0xaa, 0x57, 0xc4, 0x93, 0xf1, 0xf0, 0x0e, 0xf0,
	0x72, 0xf3, 0x32, 0x23, 0x93, 0xd4, 0xb9, 0x25, 0xde, 0xd2, 0x0c, 0x87, 0xa8, 0x3d, 0xd2, 0x84,
	0xcc, 0x35, 0x99, 0x63, 0xb5, 0x22, 0xfe, 0x97, 0xf8, 0x38, 0x20, 0xbb, 0xef, 0x60, 0xd6, 0x1f,
	0x56, 0x9b, 0x9b, 0x8c, 0xd8, 0x81, 0xb5, 0x1e, 0x88, 0xff, 0x87, 0x17, 0x89, 0x74, 0x35, 0xdf,
	0xf8, 0x13, 0x54, 0xe5, 0xe7, 0x29, 0x7f, 0x02, 0x5e, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xdf,
	0x38, 0xfb, 0x17, 0x24, 0x04, 0x00, 0x00,
}
